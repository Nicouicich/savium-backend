import { Injectable, Logger } from '@nestjs/common';
import { AiService } from './ai.service';
import { ExpensesService } from '../../expenses/expenses.service';
import { CategoriesService } from '../../categories/categories.service';
import { UsersService } from '../../users/users.service';
import { buildMessagePrompt, buildAudioPrompt, formatUserCategories } from './prompts/ai-prompts';

export interface UnifiedMessage {
  from: string;
  body: string;
  timestamp: Date;
  mediaUrl?: string;
  mediaType: 'text' | 'image' | 'document' | 'audio';
  platform: 'telegram' | 'whatsapp';
  chatId?: string;
  messageId?: string;
  userId?: string; // Will be populated after user lookup
}

export interface ProcessedMessageResponse {
  success: boolean;
  responseText?: string;
  actionTaken?: {
    type:
      | 'expense_created'
      | 'income_created'
      | 'image_processed'
      | 'document_processed'
      | 'general_response'
      | 'command_executed'
      | 'export_requested'
      | 'balance_requested'
      | 'report_generated';
    data?: any;
  };
  error?: string;
  requiresUserResponse?: boolean;
}

@Injectable()
export class MessageProcessorService {
  private readonly logger = new Logger(MessageProcessorService.name);

  constructor(
    private readonly aiService: AiService,
    private readonly expensesService: ExpensesService,
    private readonly categoriesService: CategoriesService,
    private readonly usersService: UsersService
  ) {}

  async processMessage(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    this.logger.log(`ü§ñ Processing ${message.platform} message from ${message.from}:`, {
      mediaType: message.mediaType,
      bodyLength: message.body?.length || 0,
      hasMedia: !!message.mediaUrl
    });

    try {
      // Route to appropriate handler based on message type
      switch (message.mediaType) {
        case 'image':
          return this.processImageMessage(message);
        case 'document':
          return this.processDocumentMessage(message);
        case 'audio':
          return this.processAudioMessage(message);
        case 'text':
        default:
          return this.processTextMessage(message);
      }
    } catch (error) {
      this.logger.error('Error processing message:', error);
      return {
        success: false,
        error: error.message,
        responseText: '‚ùå Lo siento, hubo un error procesando tu mensaje. Por favor intenta de nuevo.'
      };
    }
  }

  private async processTextMessage(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    const text = message.body?.toLowerCase() || '';

    // Check if it's a command (Telegram style)
    if (text.startsWith('/')) {
      return this.processCommand(message);
    }

    // Get user categories (mock for now - should come from database)
    const userCategories = await this.getUserCategories(message.userId);

    // First, check if it's a command using AI
    const commandResult = await this.aiService.detectCommand(message.body);
    if (commandResult.isCommand) {
      return this.processAICommand(message, commandResult);
    }

    // Use AI to analyze the message for transactions
    const aiResult = await this.aiService.processTextMessage(message.body, userCategories);

    if (aiResult.hasTransaction) {
      return this.processTransactionFromAI(message, aiResult);
    }

    // If no transaction detected, provide conversational response
    return {
      success: true,
      responseText:
        'üëã ¬°Hola! No detect√© una transacci√≥n en tu mensaje. Puedes decirme algo como "gast√© 25 en almuerzo", "recib√≠ 1000 de sueldo" o enviar una foto del ticket.',
      actionTaken: { type: 'general_response' }
    };
  }

  // M√©todo para obtener categor√≠as del usuario (mock por ahora)
  private async getUserCategories(userId?: string): Promise<string[]> {
    // TODO: Obtener categor√≠as reales del usuario desde la base de datos
    // Por ahora usamos categor√≠as por defecto
    return ['Alimentaci√≥n', 'Transporte', 'Entretenimiento', 'Salud', 'Hogar', 'Ropa', 'Educaci√≥n', 'Tecnolog√≠a', 'Servicios', 'Otros'];
  }

  // Procesar transacci√≥n detectada por IA
  private async processTransactionFromAI(message: UnifiedMessage, aiResult: any): Promise<ProcessedMessageResponse> {
    this.logger.log('AI detected transaction:', aiResult);

    const isIncome = aiResult.type === 'income';
    const transactionType = isIncome ? 'ingreso' : 'gasto';
    const emoji = isIncome ? 'üí∞' : 'üí∏';

    try {
      // Get user's active account
      const activeAccountId = await this.getUserActiveAccountId(message.userId!);
      if (!activeAccountId) {
        throw new Error('No active account found for user');
      }

      let createdTransaction;

      if (isIncome) {
        // TODO: Implement income service when available
        // For now, log income but don't create (you can extend this later)
        this.logger.log('Income detected - feature not yet implemented', {
          amount: aiResult.amount,
          description: aiResult.description,
          userId: message.userId
        });

        createdTransaction = {
          id: `income_${Date.now()}`,
          type: 'income',
          amount: aiResult.amount,
          description: aiResult.description
        };
      } else {
        // Create expense using ExpensesService
        const categoryId = await this.getCategoryByName(aiResult.category || 'Otros', activeAccountId);

        const expenseData = {
          amount: aiResult.amount,
          description: aiResult.description || 'Gasto desde mensaje',
          date: new Date(),
          categoryId,
          accountId: activeAccountId,
          isRecurring: aiResult.isRecurring || false,
          installments: aiResult.installments,
          metadata: {
            source: 'messaging_ai',
            platform: message.platform,
            confidence: aiResult.confidence,
            aiAnalysis: aiResult,
            installmentInfo: aiResult.installmentInfo
          }
        };

        const expense = await this.expensesService.create(expenseData, message.userId!);

        createdTransaction = {
          id: expense.id, // Use UUID instead of MongoDB _id
          type: 'expense',
          amount: expense.amount,
          description: expense.description,
          categoryName: aiResult.category
        };

        this.logger.log('Expense created successfully from AI message', {
          expenseId: expense.id, // Use UUID
          amount: expense.amount,
          platform: message.platform,
          userId: message.userId
        });
      }

      let responseText = `‚úÖ ¬°${transactionType.charAt(0).toUpperCase() + transactionType.slice(1)} registrado!\n\n${emoji} Monto: $${aiResult.amount}\nüìù Descripci√≥n: ${aiResult.description}\nüìÇ Categor√≠a: ${aiResult.category}`;

      if (aiResult.isRecurring) {
        responseText += `\nüîÑ ${transactionType.charAt(0).toUpperCase() + transactionType.slice(1)} recurrente detectado`;
      }

      if (aiResult.installments && aiResult.installments > 1) {
        responseText += `\nüí≥ En ${aiResult.installments} cuotas`;
        if (aiResult.installmentInfo) {
          responseText += ` (${aiResult.installmentInfo})`;
        }
      }

      responseText += `\n\nü§ñ Confianza: ${Math.round((aiResult.confidence || 0) * 100)}%`;

      if (!isIncome) {
        responseText += `\nüÜî ID: ${createdTransaction.id.substring(0, 8)}...`;
      }

      return {
        success: true,
        responseText,
        actionTaken: {
          type: isIncome ? 'income_created' : 'expense_created',
          data: {
            ...aiResult,
            transactionId: createdTransaction.id,
            actualAmount: createdTransaction.amount
          }
        }
      };
    } catch (error) {
      this.logger.error('Failed to create transaction from AI message', {
        error: error.message,
        aiResult,
        platform: message.platform,
        userId: message.userId
      });

      return {
        success: false,
        responseText: `‚ùå Lo siento, hubo un error guardando tu ${transactionType}. Los datos fueron detectados correctamente, pero no pude guardarlos en tu cuenta. Por favor intenta de nuevo.`,
        error: error.message,
        actionTaken: {
          type: 'general_response',
          data: { error: error.message, detectedData: aiResult }
        }
      };
    }
  }

  /**
   * Get user's active account ID
   */
  private async getUserActiveAccountId(userId: string): Promise<string | null> {
    try {
      const user = await this.usersService.findById(userId);
      if (!user) {
        throw new Error('User not found');
      }

      // Get active account from user's active profile
      if (user.activeProfileId) {
        // TODO: Get account from active profile when user profiles are available
        // For now, use first account if available
      }

      // Fallback: use first account
      if (user.accounts && user.accounts.length > 0) {
        return user.accounts[0].toString();
      }

      return null;
    } catch (error) {
      this.logger.error('Error getting user active account', {
        userId,
        error: error.message
      });
      return null;
    }
  }

  /**
   * Get category ID by name or return default category
   */
  private async getCategoryByName(categoryName: string, accountId: string): Promise<string> {
    try {
      const categories = await this.categoriesService.findAll(accountId);

      // Look for exact match first
      let category = categories.find(c => c.name.toLowerCase() === categoryName.toLowerCase());

      // If no exact match, look for partial match
      if (!category) {
        category = categories.find(c => c.name.toLowerCase().includes(categoryName.toLowerCase()) || categoryName.toLowerCase().includes(c.name.toLowerCase()));
      }

      if (category) {
        return category.id; // Use UUID instead of MongoDB _id
      }

      // Fallback to default category
      const defaultCategory = categories.find(c => ['otros', 'general', 'miscellaneous', 'other'].includes(c.name.toLowerCase())) || categories[0];

      if (defaultCategory) {
        return defaultCategory.id; // Use UUID instead of MongoDB _id
      }

      throw new Error('No categories found for account');
    } catch (error) {
      this.logger.error('Error finding category', {
        categoryName,
        accountId,
        error: error.message
      });
      throw error;
    }
  }

  // Procesar comandos detectados por IA
  private async processAICommand(message: UnifiedMessage, commandResult: any): Promise<ProcessedMessageResponse> {
    this.logger.log('AI detected command:', commandResult);

    switch (commandResult.commandType) {
      case 'export':
        return this.processExportCommand(message, commandResult.details);
      case 'balance':
        return this.processBalanceCommand(message, commandResult.details);
      case 'report':
        return this.processReportCommand(message, commandResult.details);
      case 'budget':
        return this.processBudgetCommand(message, commandResult.details);
      case 'help':
        return this.processHelpQuery(message);
      default:
        return {
          success: true,
          responseText: 'ü§ñ Entiendo que quieres hacer algo, pero no estoy seguro qu√©. ¬øPuedes ser m√°s espec√≠fico?',
          actionTaken: { type: 'general_response' }
        };
    }
  }

  // Procesar comando de exportaci√≥n
  private async processExportCommand(message: UnifiedMessage, details: any): Promise<ProcessedMessageResponse> {
    this.logger.log('Processing export command:', details);

    let responseText = 'üìä ¬°Perfecto! Voy a generar tu exportaci√≥n.\n\n';

    // Determinar el per√≠odo
    if (details.month && details.year) {
      responseText += `üìÖ Per√≠odo: ${details.month}/${details.year}\n`;
    } else if (details.year) {
      responseText += `üìÖ A√±o: ${details.year}\n`;
    } else {
      responseText += `üìÖ Per√≠odo: Este mes\n`;
    }

    if (details.category) {
      responseText += `üìÇ Categor√≠a: ${details.category}\n`;
    } else {
      responseText += `üìÇ Incluye: Todas las categor√≠as\n`;
    }

    // TODO: Aqu√≠ integrar con el servicio de exportaci√≥n real
    // const exportResult = await this.exportService.generateExport({
    //   userId: message.userId,
    //   period: details,
    //   format: 'excel'
    // });

    responseText += '\nüîÑ Generando archivo...\nüíæ Formato: Excel (.xlsx)\n\n';
    responseText += '‚úÖ ¬°Listo! Tu exportaci√≥n estar√° disponible en la app en unos momentos.\n\n';
    responseText += 'üí° Tambi√©n puedes descargarla desde la secci√≥n "Reportes" de la aplicaci√≥n.';

    return {
      success: true,
      responseText,
      actionTaken: {
        type: 'export_requested',
        data: {
          period: details,
          userId: message.userId,
          requestedAt: new Date()
        }
      }
    };
  }

  // Procesar comando de balance
  private async processBalanceCommand(message: UnifiedMessage, details: any): Promise<ProcessedMessageResponse> {
    this.logger.log('Processing balance command:', details);

    // TODO: Obtener datos reales del usuario
    const mockBalance = {
      thisMonth: {
        expenses: 1250,
        income: 3000,
        budget: 2000,
        remaining: 750
      },
      topCategories: [
        { name: 'Alimentaci√≥n', amount: 450 },
        { name: 'Transporte', amount: 200 },
        { name: 'Entretenimiento', amount: 150 }
      ]
    };

    let responseText = 'üí∞ Tu Resumen Financiero\n\n';
    responseText += `üìä Este mes:\n`;
    responseText += `üí∏ Gastos: $${mockBalance.thisMonth.expenses}\n`;
    responseText += `üí∞ Ingresos: $${mockBalance.thisMonth.income}\n`;
    responseText += `üìù Presupuesto: $${mockBalance.thisMonth.budget}\n`;
    responseText += `üíµ Disponible: $${mockBalance.thisMonth.remaining}\n\n`;
    responseText += `üìà Principales categor√≠as:\n`;

    mockBalance.topCategories.forEach(cat => {
      const percentage = Math.round((cat.amount / mockBalance.thisMonth.expenses) * 100);
      responseText += `‚Ä¢ ${cat.name}: $${cat.amount} (${percentage}%)\n`;
    });

    responseText += '\nüí° Para m√°s detalles, revisa la app o pide un reporte espec√≠fico.';

    return {
      success: true,
      responseText,
      actionTaken: {
        type: 'balance_requested',
        data: { userId: message.userId, requestedAt: new Date() }
      }
    };
  }

  // Procesar comando de reporte
  private async processReportCommand(message: UnifiedMessage, details: any): Promise<ProcessedMessageResponse> {
    return {
      success: true,
      responseText:
        'üìä Generando reporte personalizado...\n\nüîÑ Esta funci√≥n estar√° disponible pronto.\n\nüí° Por ahora puedes usar "balance" para ver un resumen r√°pido.',
      actionTaken: { type: 'report_generated', data: details }
    };
  }

  // Procesar comando de presupuesto
  private async processBudgetCommand(message: UnifiedMessage, details: any): Promise<ProcessedMessageResponse> {
    return {
      success: true,
      responseText:
        'üí≥ Informaci√≥n de presupuesto...\n\nüîÑ Esta funci√≥n estar√° disponible pronto.\n\nüí° Por ahora puedes usar "balance" para ver tu situaci√≥n actual.',
      actionTaken: { type: 'command_executed', data: details }
    };
  }

  // M√©todo legacy actualizado
  private async processExpenseTextLegacy(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    // Check if it's an expense message
    if (this.isExpenseMessage(message.body?.toLowerCase() || '')) {
      return this.processExpenseText(message);
    }

    // Check for common queries
    // if (this.isBalanceQuery(text)) {
    //   return this.processBalanceQuery(message);
    // }

    // if (this.isHelpQuery(text)) {
    //   return this.processHelpQuery(message);
    // }

    // General conversation - use AI for intelligent response
    return this.processGeneralMessage(message);
  }

  private async processImageMessage(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    this.logger.log(`üì∏ Processing image message with caption: "${message.body}"`);

    // If image has caption with expense data, process both image and text
    if (message.body && this.isExpenseMessage(message.body.toLowerCase())) {
      const imageResult = await this.processReceiptImage(message);
      const textResult = await this.processExpenseText(message);

      return {
        success: true,
        actionTaken: {
          type: 'expense_created',
          data: {
            fromImage: imageResult.actionTaken?.data,
            fromText: textResult.actionTaken?.data
          }
        },
        responseText: `üì∏üí∞ ¬°Perfecto! Proces√© tanto la imagen como el texto del gasto:\n\n${imageResult.responseText}\n\n${textResult.responseText}`
      };
    }

    // Process image only (receipt/ticket)
    return this.processReceiptImage(message);
  }

  private async processDocumentMessage(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    this.logger.log(`üìÑ Processing document message with caption: "${message.body}"`);

    // Similar logic to image but for documents (PDFs, etc.)
    if (message.body && this.isExpenseMessage(message.body.toLowerCase())) {
      const docResult = await this.processReceiptDocument(message);
      const textResult = await this.processExpenseText(message);

      return {
        success: true,
        actionTaken: {
          type: 'expense_created',
          data: {
            fromDocument: docResult.actionTaken?.data,
            fromText: textResult.actionTaken?.data
          }
        },
        responseText: `üìÑüí∞ ¬°Excelente! Proces√© tanto el documento como el texto del gasto:\n\n${docResult.responseText}\n\n${textResult.responseText}`
      };
    }

    return this.processReceiptDocument(message);
  }

  private async processAudioMessage(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    this.logger.log(`üé§ Processing audio message from ${message.from}`);

    if (!this.aiService.isAiEnabled()) {
      return {
        success: true,
        actionTaken: { type: 'general_response' },
        responseText:
          'üé§ ¬°Audio recibido! (IA no configurada - datos de prueba)\n\nüí¨ Transcripci√≥n simulada: "Gast√© 25 pesos en almuerzo"\n\nüí∞ Gasto detectado: $25.00\nüìù Descripci√≥n: Almuerzo\nüìå Categor√≠a: Comida\n\n‚úÖ Gasto guardado exitosamente'
      };
    }

    try {
      // Here you would download the audio file and process it
      // For now, we'll simulate the process
      const mockAudioBuffer = Buffer.from('mock audio data');
      const audioResult = await this.aiService.processAudioMessage(mockAudioBuffer, 'audio/ogg');

      let responseText = `üé§ ¬°Audio procesado con Whisper!\n\nüí¨ Transcripci√≥n: "${audioResult.transcription}"\nüåç Idioma: ${audioResult.language || 'Detectado autom√°ticamente'}\nüéØ Confianza: ${Math.round((audioResult.confidence || 0) * 100)}%`;

      if (audioResult.processedTransaction && audioResult.processedTransaction.amount) {
        // Audio contains transaction information
        const isIncome = audioResult.processedTransaction.type === 'income';
        const transactionType = isIncome ? 'ingreso' : 'gasto';
        const emoji = isIncome ? 'üí∞' : 'üí∏';

        const transactionData = {
          type: audioResult.processedTransaction.type,
          amount: audioResult.processedTransaction.amount,
          description: audioResult.processedTransaction.description || (isIncome ? 'Ingreso desde audio' : 'Gasto desde audio'),
          category: audioResult.processedTransaction.category || 'Otros',
          isRecurring: audioResult.processedTransaction.isRecurring,
          installments: audioResult.processedTransaction.installments,
          installmentInfo: audioResult.processedTransaction.installmentInfo,
          userId: message.userId,
          platform: message.platform,
          source: 'audio',
          createdAt: new Date()
        };

        responseText += `\n\n${emoji} ¬°${transactionType.charAt(0).toUpperCase() + transactionType.slice(1)} detectado autom√°ticamente!\nüíµ Monto: $${transactionData.amount}\nüìù Descripci√≥n: ${transactionData.description}\nüìå Categor√≠a: ${transactionData.category}`;

        if (transactionData.isRecurring) {
          responseText += `\nüîÑ ${transactionType.charAt(0).toUpperCase() + transactionType.slice(1)} recurrente`;
        }

        if (transactionData.installments && transactionData.installments > 1) {
          responseText += `\nüí≥ En ${transactionData.installments} cuotas`;
          if (transactionData.installmentInfo) {
            responseText += ` (${transactionData.installmentInfo})`;
          }
        }

        responseText += `\n\n‚úÖ ${transactionType.charAt(0).toUpperCase() + transactionType.slice(1)} guardado exitosamente`;

        return {
          success: true,
          actionTaken: {
            type: isIncome ? 'income_created' : 'expense_created',
            data: transactionData
          },
          responseText
        };
      } else {
        // Audio doesn't contain transaction information
        responseText += `\n\nüí¨ Mensaje procesado correctamente\nüí° No se detect√≥ informaci√≥n de transacciones en el audio`;

        return {
          success: true,
          actionTaken: { type: 'general_response' },
          responseText
        };
      }
    } catch (error) {
      this.logger.error('Error processing audio message:', error);
      return {
        success: false,
        error: error.message,
        responseText: '‚ùå Error procesando el audio. Por favor intenta enviar el mensaje de texto o prueba con otro audio.'
      };
    }
  }

  private async processReceiptImage(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    if (!this.aiService.isAiEnabled()) {
      return {
        success: true,
        actionTaken: { type: 'image_processed' },
        responseText:
          'üì∏ ¬°Imagen recibida! (IA no configurada - datos de prueba)\n\nüí∞ Gasto detectado: $25.00\nüìù Descripci√≥n: Almuerzo\nüìÇ Categor√≠a: Comida\n\n‚úÖ Gasto guardado exitosamente'
      };
    }

    try {
      // Here you would download the image and process it
      // For now, we'll simulate the process
      const mockImageBuffer = Buffer.from('mock image data');
      const ticketResult = await this.aiService.processTicketImage(mockImageBuffer, 'image/jpeg');

      if (ticketResult.amount && ticketResult.amount > 0) {
        // Create expense in database (you'll need to inject ExpensesService)
        const expenseData = {
          amount: ticketResult.amount,
          description: ticketResult.description || 'Gasto desde imagen',
          vendor: ticketResult.vendor,
          date: ticketResult.date || new Date(),
          category: ticketResult.suggestedCategory
        };

        return {
          success: true,
          actionTaken: {
            type: 'expense_created',
            data: expenseData
          },
          responseText: `üì∏ ¬°Imagen procesada con IA!\n\nüí∞ Gasto detectado: $${ticketResult.amount}\nüìù Descripci√≥n: ${ticketResult.description}\nüè™ Comercio: ${ticketResult.vendor || 'No detectado'}\nüìÇ Categor√≠a sugerida: ${ticketResult.suggestedCategory}\nüéØ Confianza: ${Math.round((ticketResult.confidence || 0) * 100)}%\n\n‚úÖ Gasto guardado exitosamente`
        };
      } else {
        return {
          success: true,
          actionTaken: { type: 'image_processed' },
          responseText:
            'üì∏ Imagen recibida, pero no pude detectar informaci√≥n de gasto.\n\nüí° Consejo: Aseg√∫rate de que la imagen sea clara y muestre el total del recibo.',
          requiresUserResponse: true
        };
      }
    } catch (error) {
      this.logger.error('Error processing receipt image:', error);
      return {
        success: false,
        error: error.message,
        responseText: '‚ùå Error procesando la imagen. Por favor intenta enviarla de nuevo o ingresa el gasto manualmente.'
      };
    }
  }

  private async processReceiptDocument(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    return {
      success: true,
      actionTaken: { type: 'document_processed' },
      responseText:
        'üìÑ Documento recibido. El procesamiento de documentos PDF a√∫n no est√° implementado.\n\nüí° Consejo: Puedes enviar una foto del recibo o escribir el gasto manualmente.'
    };
  }

  private async processExpenseText(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    const expenseData = this.extractExpenseFromText(message.body);

    if (!expenseData.amount) {
      return {
        success: false,
        responseText: '‚ùå No pude entender el monto del gasto.\n\nüí° Ejemplos v√°lidos:\n‚Ä¢ "Gast√© $25 en almuerzo"\n‚Ä¢ "25 comida"\n‚Ä¢ "Spent 30 on groceries"'
      };
    }

    // Use AI for category suggestion if enabled
    let suggestedCategory = 'Otros';
    if (this.aiService.isAiEnabled()) {
      try {
        const defaultCategories = ['Alimentaci√≥n', 'Transporte', 'Entretenimiento', 'Salud', 'Hogar', 'Otros'];
        const categorySuggestions = await this.aiService.categorizeExpense(
          expenseData.description || '',
          expenseData.amount,
          defaultCategories,
          expenseData.vendor
        );

        if (categorySuggestions.length > 0) {
          suggestedCategory = categorySuggestions[0].categoryName;
        }
      } catch (error) {
        this.logger.warn('Error getting AI category suggestion:', error.message);
      }
    }

    // Here you would save to database
    const savedExpense = {
      ...expenseData,
      category: suggestedCategory,
      userId: message.userId,
      platform: message.platform,
      createdAt: new Date()
    };

    return {
      success: true,
      actionTaken: {
        type: 'expense_created',
        data: savedExpense
      },
      responseText: `‚úÖ ¬°Gasto registrado!\n\nüí∞ Monto: $${expenseData.amount}\nüìù Descripci√≥n: ${expenseData.description}\nüìÇ Categor√≠a: ${suggestedCategory}\nüìÖ Fecha: ${new Date().toLocaleDateString('es-ES')}\n\nü§ñ ${this.aiService.isAiEnabled() ? 'Categorizado con IA' : 'Categor√≠a por defecto'}`
    };
  }

  private async processCommand(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    const command = message.body.split(' ')[0].toLowerCase();

    switch (command) {
      case '/start':
        return {
          success: true,
          actionTaken: { type: 'command_executed' },
          responseText: `üëã ¬°Hola! Soy tu asistente de finanzas personales Savium.\n\nüí∞ Puedes:\n‚Ä¢ Enviar gastos: "gast√© 25 en almuerzo"\n‚Ä¢ Enviar fotos de recibos\n‚Ä¢ Ver tu balance: /balance\n‚Ä¢ Obtener ayuda: /help\n\nü§ñ ¬°Empecemos a manejar mejor tu dinero!`
        };

      case '/help':
        return this.processHelpQuery(message);

      case '/balance':
        return this.processBalanceQuery(message);

      case '/categories':
        return {
          success: true,
          actionTaken: { type: 'command_executed' },
          responseText:
            'üìÇ Categor√≠as disponibles:\n\nüçΩÔ∏è Comida y Restaurantes\nüöó Transporte\nüõí Compras\nüéØ Entretenimiento\nüíä Salud\nüè† Hogar\nüíº Trabajo\nüì± Suscripciones\nüìö Educaci√≥n\nüîß Servicios\nüí∏ Otros'
        };

      default:
        return {
          success: false,
          responseText: `‚ùì Comando "${command}" no reconocido.\n\nUsa /help para ver los comandos disponibles.`
        };
    }
  }

  private async processGeneralMessage(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    // This could use AI for intelligent conversation
    const responses = [
      'ü§ñ ¬°Hola! Estoy aqu√≠ para ayudarte con tus finanzas.',
      'üí∞ ¬øQuieres registrar un gasto? Escribe algo como "gast√© 20 en caf√©"',
      'üì∏ Tambi√©n puedes enviar fotos de tus recibos para procesamiento autom√°tico.',
      '‚ùì Si necesitas ayuda, escribe /help'
    ];

    const randomResponse = responses[Math.floor(Math.random() * responses.length)];

    return {
      success: true,
      actionTaken: { type: 'general_response' },
      responseText: `${randomResponse}\n\nüí° Tu mensaje: "${message.body}"`
    };
  }

  private async processBalanceQuery(message: UnifiedMessage): Promise<ProcessedMessageResponse> {
    // This would fetch real data from database
    return {
      success: true,
      actionTaken: { type: 'command_executed' },
      responseText: `üí∞ Resumen Financiero\n\nüìä Este mes:\n‚Ä¢ Gastado: $1,250\n‚Ä¢ Presupuesto: $2,000\n‚Ä¢ Disponible: $750\n\nüìà Categor√≠as principales:\n‚Ä¢ Comida: $450 (36%)\n‚Ä¢ Transporte: $200 (16%)\n‚Ä¢ Entretenimiento: $150 (12%)\n\n(Datos de ejemplo - conectar con DB real)`
    };
  }

  private processHelpQuery(message: UnifiedMessage): ProcessedMessageResponse {
    return {
      success: true,
      actionTaken: { type: 'command_executed' },
      responseText: `ü§ñ Comandos disponibles:\n\nüí∞ Registrar gastos:\n‚Ä¢ "gast√© 25 en almuerzo"\n‚Ä¢ "30 caf√©"\n‚Ä¢ Env√≠a foto del recibo\n\nüìä Informaci√≥n:\n‚Ä¢ /balance - Ver resumen\n‚Ä¢ /categories - Ver categor√≠as\n\n‚ùì Ayuda:\n‚Ä¢ /help - Este mensaje\n‚Ä¢ /start - Mensaje de bienvenida\n\nü§ñ ¬°Estoy aqu√≠ para ayudarte a manejar mejor tu dinero!`
    };
  }

  // Helper methods
  private isExpenseMessage(text: string): boolean {
    const expenseKeywords = ['gast√©', 'gaste', 'spent', 'compr√©', 'compre', 'pagu√©', 'pague', 'cost√≥', 'costo', 'cuesta', 'precio', '$'];

    const hasExpenseKeyword = expenseKeywords.some(keyword => text.includes(keyword));
    const hasAmount = /\$?\d+(?:\.\d{2})?/.test(text);

    return hasExpenseKeyword || hasAmount;
  }

  private isBalanceQuery(text: string): boolean {
    const balanceKeywords = ['balance', 'saldo', 'dinero', 'gastado', 'resumen', 'estado'];
    return balanceKeywords.some(keyword => text.includes(keyword));
  }

  private isHelpQuery(text: string): boolean {
    const helpKeywords = ['ayuda', 'help', 'comandos', 'que puedes hacer', 'como funciona'];
    return helpKeywords.some(keyword => text.includes(keyword));
  }

  private extractExpenseFromText(text: string): {
    amount?: number;
    description?: string;
    vendor?: string;
  } {
    // Enhanced expense parsing patterns
    const patterns = [
      // "gast√© 25 en almuerzo"
      /(?:gast√©|gaste|spent|pagu√©|pague)\s+\$?(\d+(?:\.\d{2})?)\s+(?:en|on|for)\s+(.+)/i,
      // "25 almuerzo" or "$25 lunch"
      /\$?(\d+(?:\.\d{2})?)\s+(.+)/,
      // "almuerzo 25" or "lunch $25"
      /(.+?)\s+\$?(\d+(?:\.\d{2})?)$/,
      // "cost√≥ 25" or "cost 25"
      /(?:cost√≥|costo|cost|price)\s+\$?(\d+(?:\.\d{2})?)/i
    ];

    for (const pattern of patterns) {
      const match = text.match(pattern);
      if (match) {
        const amount = parseFloat(match[1] || match[2]);
        const description = (match[2] || match[1] || '').trim();

        if (amount && !isNaN(amount)) {
          return {
            amount,
            description: description || 'Gasto sin descripci√≥n'
          };
        }
      }
    }

    return {};
  }
}
